import os
os.environ["TF_ENABLE_ONEDNN_OPTS"] = "0"        # T·∫Øt ONEDNN delegate
os.environ["TF_DELEGATE_ENABLE"] = "0"           # T·∫Øt XNNPACK
os.environ["TF_USE_LEGACY_KERAS"] = "1"          # ‚ö†Ô∏è √âp d√πng Keras chu·∫©n, kh√¥ng TFLite h√≥a ng·∫ßm

import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image, ImageEnhance, ImageOps
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import time
import hashlib
from datetime import datetime
import io
import base64
import cv2
import json

# T·∫Øt c√°c warning c·ªßa TensorFlow
tf.get_logger().setLevel('ERROR')
import warnings
warnings.filterwarnings('ignore')

# ƒê·∫£m b·∫£o set_page_config l√† d√≤ng ƒë·∫ßu ti√™n
st.set_page_config(
    page_title="Ph√¢n lo·∫°i r√°c th√¥ng minh AI",
    page_icon="‚ôªÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# === Custom CSS ===
def load_custom_css():
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #00C9FF 0%, #92FE9D 100%);
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        color: white;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #00C9FF;
    }
    
    .drag-drop-area {
        border: 2px dashed #00C9FF;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background: #f8f9fa;
        margin: 1rem 0;
    }
    
    .result-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 4px solid #28a745;
    }
    
    .warning-card {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        border-left: 4px solid #f39c12;
    }
    
    .recycling-tip {
        background: #e8f5e8;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid #28a745;
    }
    </style>
    """, unsafe_allow_html=True)

# === Th√¥ng tin l·ªõp r√°c v·ªõi tips t√°i ch·∫ø ===
LABELS_INFO = {
    "huu_co": {
        "vi": "R√°c h·ªØu c∆°",
        "info": "Th·ª©c ƒÉn th·ª´a, rau c·ªß qu·∫£, l√° c√¢y...",
        "image": "resources/huu_co.jpg",
        "recycling_tips": [
            "·ª¶ ph√¢n ƒë·ªÉ t·∫°o ph√¢n b√≥n h·ªØu c∆°",
            "Kh√¥ng tr·ªôn v·ªõi r√°c t√°i ch·∫ø",
            "S·ª≠ d·ª•ng th√πng ·ªß ph√¢n t·∫°i nh√†",
            "Gi·∫£m l√£ng ph√≠ th·ª±c ph·∫©m"
        ],
        "collection_points": "Th√πng r√°c h·ªØu c∆° ho·∫∑c khu ·ªß ph√¢n",
        "color": "#006400"
    },
    "tai_che": {
        "vi": "R√°c t√°i ch·∫ø",
        "info": "Gi·∫•y, nh·ª±a, kim lo·∫°i, th·ªßy tinh, v·∫£i, ƒë·ªì da, pin...",
        "image": "resources/tai_che.jpg",
        "recycling_tips": [
            "Ph√¢n lo·∫°i ƒë√∫ng tr∆∞·ªõc khi b·ªè v√†o th√πng t√°i ch·∫ø",
            "R·ª≠a s·∫°ch nh·ª±a, kim lo·∫°i, th·ªßy tinh",
            "Mang pin ƒë·∫øn ƒëi·ªÉm thu gom chuy√™n d·ª•ng",
            "T√°i ch·∫ø ti·∫øt ki·ªám t√†i nguy√™n"
        ],
        "collection_points": "Th√πng t√°i ch·∫ø (xanh l√°, xanh d∆∞∆°ng, x√°m, v√†ng)",
        "color": "#28a745"
    },
    "vo_co": {
        "vi": "R√°c v√¥ c∆°",
        "info": "T√∫i nilon, x·ªëp, ly nh·ª±a d√πng m·ªôt l·∫ßn...",
        "image": "resources/vo_co.jpg",
        "recycling_tips": [
            "Gi·∫£m s·ª≠ d·ª•ng nh·ª±a d√πng m·ªôt l·∫ßn",
            "Kh√¥ng tr·ªôn v·ªõi r√°c t√°i ch·∫ø",
            "X·ª≠ l√Ω ƒë√∫ng c√°ch ƒë·ªÉ tr√°nh √¥ nhi·ªÖm"
        ],
        "collection_points": "Th√πng r√°c th√¥ng th∆∞·ªùng",
        "color": "#800080"
    }
}

# === Kh·ªüi t·∫°o v√† t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ ===
HISTORY_FILE = "history_data.json"

def load_history():
    """T·∫£i l·ªãch s·ª≠ t·ª´ file"""
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except:
        return []

def save_history(history_data):
    """L∆∞u l·ªãch s·ª≠ v√†o file"""
    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"L·ªói khi l∆∞u l·ªãch s·ª≠: {e}")

# === Initialize session state ===
if 'history_data' not in st.session_state:
    st.session_state.history_data = load_history()
if 'processed_images' not in st.session_state:
    st.session_state.processed_images = {}
if 'camera_enabled' not in st.session_state:
    st.session_state.camera_enabled = False

@st.cache_resource
def load_model():
    try:
        # Load m√¥ h√¨nh ki·ªÉu Keras thu·∫ßn
        from keras.models import load_model
        return load_model("trashnet_model.keras", compile=False)
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
        st.stop()

model = load_model()
class_names = list(LABELS_INFO.keys())

# === Utility Functions ===
def get_image_hash(image):
    """T·∫°o hash cho ·∫£nh ƒë·ªÉ ph√°t hi·ªán tr√πng l·∫∑p"""
    image_bytes = io.BytesIO()
    image.save(image_bytes, format='PNG')
    return hashlib.md5(image_bytes.getvalue()).hexdigest()

def auto_rotate_image(image):
    """T·ª± ƒë·ªông xoay ·∫£nh d·ª±a tr√™n d·ªØ li·ªáu EXIF"""
    try:
        return ImageOps.exif_transpose(image)
    except:
        return image

def process_image(image: Image.Image):
    """X·ª≠ l√Ω ·∫£nh"""
    # T·ª± ƒë·ªông xoay
    image = auto_rotate_image(image)
    
    img = image.convert("RGB").resize((224, 224))
    array = tf.keras.preprocessing.image.img_to_array(img)
    array = array / 255.0
    return np.expand_dims(array, axis=0)

# === Main Interface ===
def main():
    load_custom_css()
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ AI Ph√¢n lo·∫°i r√°c th√¥ng minh</h1>
        <p>·ª®ng d·ª•ng AI ti√™n ti·∫øn gi√∫p ph√¢n lo·∫°i r√°c v√† b·∫£o v·ªá m√¥i tr∆∞·ªùng</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Camera toggle
        st.subheader("üì∑ Camera")
        camera_toggle = st.toggle("B·∫≠t camera", value=st.session_state.camera_enabled)
        st.session_state.camera_enabled = camera_toggle
        
        # Clear history
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            st.session_state.history_data = []
            st.session_state.processed_images = {}
            save_history([])
            st.success("ƒê√£ x√≥a l·ªãch s·ª≠!")
            st.rerun()
    
    # Educational section - moved up
    with st.expander("üìö T√¨m hi·ªÉu v·ªÅ ph√¢n lo·∫°i r√°c"):
        st.markdown("### üåç T·∫°i sao ph√¢n lo·∫°i r√°c quan tr·ªçng?")
        st.markdown("""
        - **B·∫£o v·ªá m√¥i tr∆∞·ªùng**: Gi·∫£m √¥ nhi·ªÖm ƒë·∫•t, n∆∞·ªõc v√† kh√¥ng kh√≠
        - **Ti·∫øt ki·ªám t√†i nguy√™n**: T√°i ch·∫ø gi√∫p ti·∫øt ki·ªám nguy√™n li·ªáu th√¥
        - **Gi·∫£m kh√≠ th·∫£i**: Gi·∫£m ph√°t th·∫£i CO2 v√† kh√≠ nh√† k√≠nh
        - **Kinh t·∫ø tu·∫ßn ho√†n**: T·∫°o ra gi√° tr·ªã t·ª´ ch·∫•t th·∫£i
        """)
        
        st.markdown("### ‚ôªÔ∏è H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng lo·∫°i r√°c:")
        
        for label, info in LABELS_INFO.items():
            with st.container():
                st.markdown(f"#### {info['vi']}")
                
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    if os.path.exists(info['image']):
                        st.image(info['image'], caption=f"H√¨nh minh h·ªça: {info['vi']}", width=150)
                
                with col2:
                    st.markdown(f"**M√¥ t·∫£:** {info['info']}")
                    st.markdown(f"**ƒêi·ªÉm thu gom:** {info['collection_points']}")
                    
                    st.markdown("**C√°ch t√°i ch·∫ø:**")
                    for tip in info['recycling_tips']:
                        st.markdown(f"‚Ä¢ {tip}")
                
                st.markdown("---")
    
    # Main content
    st.subheader("üì§ T·∫£i l√™n h√¨nh ·∫£nh")
    
    # Drag and drop area
    st.markdown("""
    <div class="drag-drop-area">
        <h3>üéØ K√©o th·∫£ ho·∫∑c click ƒë·ªÉ t·∫£i ·∫£nh</h3>
        <p>H·ªó tr·ª£ JPG, PNG, JPEG ‚Ä¢ T·ªëi ƒëa 200MB m·ªói ·∫£nh</p>
    </div>
    """, unsafe_allow_html=True)
    
    uploaded_files = st.file_uploader(
        "Ch·ªçn nhi·ªÅu ·∫£nh", 
        accept_multiple_files=True, 
        type=["jpg", "jpeg", "png"],
        label_visibility="collapsed"
    )
    
    # Camera input (only if enabled)
    camera_image = None
    if st.session_state.camera_enabled:
        camera_image = st.camera_input("Ch·ª•p ·∫£nh r√°c")
        if camera_image:
            uploaded_files = [camera_image] + (uploaded_files or [])
    
    # Process uploaded images
    if uploaded_files:
        st.subheader("üîç K·∫øt qu·∫£ ph√¢n lo·∫°i")
        
        # Progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        results = []
        
        for i, uploaded_file in enumerate(uploaded_files):
            # Update progress
            progress = (i + 1) / len(uploaded_files)
            progress_bar.progress(progress)
            status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
            
            # Load and process image
            img = Image.open(uploaded_file)
            img_hash = get_image_hash(img)
            
            # Process image
            input_tensor = process_image(img)
            
            # Predict
            with st.spinner("ƒêang ph√¢n t√≠ch..."):
                prediction = model.predict(input_tensor, verbose=0)[0]
                predicted_idx = np.argmax(prediction)
                predicted_label = class_names[predicted_idx]
                confidence = prediction[predicted_idx]
            
            # Store result
            vi_label = LABELS_INFO[predicted_label]["vi"]
            description = LABELS_INFO[predicted_label]["info"]
            
            result = {
                'file': uploaded_file,
                'image': img,
                'label': predicted_label,
                'vi_label': vi_label,
                'confidence': confidence,
                'description': description,
                'hash': img_hash
            }
            results.append(result)
            
            # Store in session
            st.session_state.processed_images[img_hash] = result
            
            # Th√™m v√†o l·ªãch s·ª≠
            history_entry = {
                "T√™n ·∫£nh": uploaded_file.name,
                "Lo·∫°i r√°c": vi_label,
                "ƒê·ªô ch√≠nh x√°c (%)": f"{confidence*100:.2f}%",
                "Th·ªùi gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            st.session_state.history_data.append(history_entry)
        
        # L∆∞u l·ªãch s·ª≠ v√†o file
        save_history(st.session_state.history_data)
        
        # Clear progress
        progress_bar.empty()
        status_text.empty()
        
        # Display results
        for result in results:
            with st.container():
                st.markdown(f"""
                <div class="result-card">
                    <h4>üìã K·∫øt qu·∫£: {result['file'].name}</h4>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2 = st.columns([1, 1])
                
                with col1:
                    st.image(result['image'], caption="·∫¢nh g·ªëc", use_container_width=True)
                
                with col2:
                    st.markdown(f"**üè∑Ô∏è Lo·∫°i r√°c:** `{result['vi_label']}`")
                    st.markdown(f"**üìù M√¥ t·∫£:** {result['description']}")
                
                # Recycling tips
                st.markdown(f"""
                <div class="recycling-tip">
                    <h5>‚ôªÔ∏è H∆∞·ªõng d·∫´n t√°i ch·∫ø {result['vi_label']}:</h5>
                </div>
                """, unsafe_allow_html=True)
                
                tips = LABELS_INFO[result['label']]['recycling_tips']
                for tip in tips:
                    st.markdown(f"‚Ä¢ {tip}")
                
                collection_point = LABELS_INFO[result['label']]['collection_points']
                st.info(f"üìç **ƒêi·ªÉm thu gom:** {collection_point}")
                
                st.markdown("---")
    
    # Analytics Dashboard
    if st.session_state.history_data:
        st.subheader("üìà Ph√¢n t√≠ch th·ªëng k√™")
        
        df = pd.DataFrame(st.session_state.history_data)
        
        # T·∫°o c·ªôt cho th√°ng ƒë·ªÉ ph√¢n t√≠ch theo th·ªùi gian
        df['Th·ªùi gian'] = pd.to_datetime(df['Th·ªùi gian'])
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribution chart
            trash_counts = df['Lo·∫°i r√°c'].value_counts()
            colors = [LABELS_INFO[label]['color'] for label in LABELS_INFO.keys() if LABELS_INFO[label]['vi'] in trash_counts.index]
            
            fig = px.pie(
                values=trash_counts.values,
                names=trash_counts.index,
                title="Ph√¢n b·ªë lo·∫°i r√°c",
                color_discrete_sequence=colors
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Recycling tips for each type
            st.markdown("### ‚ôªÔ∏è H∆∞·ªõng d·∫´n t√°i ch·∫ø")
            
            for label, info in LABELS_INFO.items():
                if info['vi'] in trash_counts.index:
                    count = trash_counts[info['vi']]
                    st.markdown(f"**{info['vi']} ({count} ·∫£nh):**")
                    st.markdown(f"üìç {info['collection_points']}")
                    
                    # Show first 2 recycling tips
                    for i, tip in enumerate(info['recycling_tips'][:2]):
                        st.markdown(f"‚Ä¢ {tip}")
                    
                    st.markdown("---")
        
        # ƒê√É X√ìA: Heatmap by day of week and hour
        # Ph·∫ßn code heatmap ho·∫°t ƒë·ªông theo gi·ªù v√† ng√†y ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè ho√†n to√†n
        
        # Top statistics
        st.subheader("üìä Th·ªëng k√™ t·ªïng quan")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("T·ªïng s·ªë ·∫£nh", len(df))
        
        with col2:
            most_common = df['Lo·∫°i r√°c'].mode().iloc[0] if not df.empty else "Ch∆∞a c√≥"
            st.metric("Lo·∫°i r√°c ph·ªï bi·∫øn", most_common)
        
        with col3:
            # T√≠nh ƒë·ªô ch√≠nh x√°c trung b√¨nh
            df['ƒê·ªô ch√≠nh x√°c s·ªë'] = df['ƒê·ªô ch√≠nh x√°c (%)'].str.rstrip('%').astype(float)
            avg_accuracy = df['ƒê·ªô ch√≠nh x√°c s·ªë'].mean()
            st.metric("ƒê·ªô ch√≠nh x√°c TB", f"{avg_accuracy:.1f}%")
        
        with col4:
            # S·ªë lo·∫°i r√°c kh√°c nhau
            unique_types = df['Lo·∫°i r√°c'].nunique()
            st.metric("Lo·∫°i r√°c ƒë√£ ph√¢n lo·∫°i", unique_types)
        
        # Export options
        st.subheader("üì§ Xu·∫•t d·ªØ li·ªáu")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            csv = df.to_csv(index=False).encode("utf-8-sig")
            st.download_button(
                "üìä T·∫£i t·ªáp CSV",
                data=csv,
                file_name=f"phan_loai_rac_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Ph√¢n lo·∫°i r√°c')
            
            st.download_button(
                "üìà T·∫£i t·ªáp Excel",
                data=excel_buffer.getvalue(),
                file_name=f"phan_loai_rac_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        with col3:
            # Backup history
            history_json = json.dumps(st.session_state.history_data, ensure_ascii=False, indent=2)
            st.download_button(
                "üíæ Backup l·ªãch s·ª≠",
                data=history_json,
                file_name=f"backup_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        
        # History table
        st.subheader("üìù L·ªãch s·ª≠ chi ti·∫øt")
        
        # Search and filter
        search_term = st.text_input("üîç T√¨m ki·∫øm trong l·ªãch s·ª≠:")
        if search_term:
            filtered_df = df[df['T√™n ·∫£nh'].str.contains(search_term, case=False, na=False)]
        else:
            filtered_df = df
        
        # Display with formatting
        display_df = filtered_df[['T√™n ·∫£nh', 'Lo·∫°i r√°c', 'ƒê·ªô ch√≠nh x√°c (%)', 'Th·ªùi gian']].copy()
        
        st.dataframe(
            display_df,
            use_container_width=True
        )
    
    # Footer
    st.markdown("""
<div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 10px; margin-top: 2rem;">
    <h4>üì¨ Li√™n h·ªá</h4>
    <p>N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, g√≥p √Ω ho·∫∑c mu·ªën h·ª£p t√°c, vui l√≤ng li√™n h·ªá:</p>
    <p>üìß Email: <a href="mailto:fftt0519@gmail.com">fftt0519@gmail.com</a></p>
    <p>üìû ƒêi·ªán tho·∫°i: 0339336571</p>
</div>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
