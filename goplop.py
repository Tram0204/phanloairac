import os
import shutil
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# B·∫£n ƒë·ªì nh√≥m: t·ª´ nh√£n g·ªëc -> nh√≥m m·ªõi
NHOM_RAC = {
    'biological': 'huu_co',
    'trash': 'vo_co',
    'shoes': 'vo_co',
    'battery': 'tai_che',
    'cardboard': 'tai_che',
    'glass': 'tai_che',
    'metal': 'tai_che',
    'paper': 'tai_che',
    'plastic': 'tai_che',
    'clothes': 'tai_che'
}

def gop_thanh_3_lop(input_dir="dataset_cleaned", output_dir="dataset_3_nhom"):
    """G·ªôp d·ªØ li·ªáu t·ª´ 10 l·ªõp th√†nh 3 l·ªõp"""
    os.makedirs(output_dir, exist_ok=True)

    # T·∫°o c√°c th∆∞ m·ª•c nh√≥m m·ªõi
    for group in set(NHOM_RAC.values()):
        os.makedirs(os.path.join(output_dir, group), exist_ok=True)

    # Duy·ªát qua t·ª´ng th∆∞ m·ª•c g·ªëc
    for label in NHOM_RAC:
        src_folder = os.path.join(input_dir, label)
        dst_group = NHOM_RAC[label]
        dst_folder = os.path.join(output_dir, dst_group)

        if not os.path.exists(src_folder):
            logger.warning(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {src_folder}")
            continue

        files = os.listdir(src_folder)
        for file in files:
            src_path = os.path.join(src_folder, file)
            dst_path = os.path.join(dst_folder, f"{label}_{file}")  # Th√™m ti·ªÅn t·ªë nh√£n c≈©
            try:
                shutil.copy2(src_path, dst_path)
            except Exception as e:
                logger.warning(f"L·ªói copy {src_path}: {e}")

        logger.info(f"‚úÖ ƒê√£ g·ªôp {len(files)} ·∫£nh t·ª´ {label} v√†o nh√≥m {dst_group}")

    logger.info("üéâ Ho√†n t·∫•t g·ªôp d·ªØ li·ªáu th√†nh 3 nh√≥m!")

if __name__ == "__main__":
    gop_thanh_3_lop()
